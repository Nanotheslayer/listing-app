import { invoke } from "@tauri-apps/api/core";

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
export interface SkinPrice {
  skin_name: string;
  price: string;
}

export interface SkinPriceRequest {
  skins: string[];
  server: string;
}

export interface SkinPriceResponse {
  prices: SkinPrice[];
  total_value: string;
  most_expensive: SkinPrice | null;
}

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω–∞–º–∏ —Å–∫–∏–Ω–æ–≤
export class SkinPriceManager {
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ G2G
  async checkConfig(): Promise<boolean> {
    try {
      const status = await invoke<boolean>("get_g2g_config_status");
      return status;
    } catch (error) {
      console.error("G2G config check failed:", error);
      return false;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–∫–∏–Ω–æ–≤
  async fetchPrices(skins: string[], server: string): Promise<SkinPriceResponse> {
    try {
      console.log("=== –ó–∞–ø—Ä–æ—Å —Ü–µ–Ω —Å–∫–∏–Ω–æ–≤ ===");
      console.log("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–∏–Ω–æ–≤:", skins.length);
      console.log("–°–µ—Ä–≤–µ—Ä:", server);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
      const configOk = await this.checkConfig();
      if (!configOk) {
        throw new Error(
          "G2G —Ç–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Ç–æ–∫–µ–Ω–∞–º–∏ (—Å–º. .env.example)"
        );
      }

      const request: SkinPriceRequest = {
        skins,
        server,
      };

      const response = await invoke<SkinPriceResponse>("fetch_skin_prices", { request });

      console.log("=== –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω ===");
      console.log("–ü–æ–ª—É—á–µ–Ω–æ —Ü–µ–Ω:", response.prices.length);
      console.log("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:", response.total_value);
      console.log("–°–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π —Å–∫–∏–Ω:", response.most_expensive);

      return response;
    } catch (error) {
      console.error("=== –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω ===", error);
      throw error;
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  formatPriceInfo(response: SkinPriceResponse): string {
    const lines: string[] = [];

    lines.push("üìä –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω —Å–∫–∏–Ω–æ–≤");
    lines.push("");
    lines.push(`–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${response.total_value}`);
    lines.push(`–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–∫–∏–Ω–æ–≤: ${response.prices.length}`);
    lines.push("");

    if (response.most_expensive) {
      lines.push(`üíé –°–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π —Å–∫–∏–Ω:`);
      lines.push(`   ${response.most_expensive.skin_name}: ${response.most_expensive.price}`);
      lines.push("");
    }

    lines.push("üìã –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫:");
    lines.push("");

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∫–∏–Ω—ã –ø–æ —Ü–µ–Ω–µ (–æ—Ç –¥–æ—Ä–æ–≥–∏—Ö –∫ –¥–µ—à–µ–≤—ã–º)
    const sortedPrices = [...response.prices].sort((a, b) => {
      const priceA = parsePrice(a.price);
      const priceB = parsePrice(b.price);
      return priceB - priceA;
    });

    for (const item of sortedPrices) {
      const icon = getIcon(item.price);
      lines.push(`${icon} ${item.skin_name}: ${item.price}`);
    }

    return lines.join("\n");
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function parsePrice(priceStr: string): number {
  if (priceStr.startsWith("$")) {
    return parseFloat(priceStr.substring(1)) || 0;
  }
  return 0;
}

function getIcon(priceStr: string): string {
  const price = parsePrice(priceStr);
  
  if (priceStr === "No offers" || priceStr === "Error") {
    return "‚ùå";
  }
  
  if (price === 0) {
    return "‚ö†Ô∏è";
  }
  
  if (price >= 100) {
    return "üíé";
  } else if (price >= 50) {
    return "‚≠ê";
  } else if (price >= 20) {
    return "‚ú®";
  } else {
    return "üîπ";
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton instance
export const skinPriceManager = new SkinPriceManager();
