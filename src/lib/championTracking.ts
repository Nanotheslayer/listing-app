// src/lib/championTracking.ts
// –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ–º–ø–∏–æ–Ω–æ–≤ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö

const STORAGE_KEY = 'g2g_champion_usage_count';

export interface ChampionUsage {
  [championName: string]: number;
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export function loadChampionUsage(): ChampionUsage {
  try {
    const stored = localStorage.getItem(STORAGE_KEY);
    if (stored) {
      return JSON.parse(stored);
    }
  } catch (error) {
    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ–º–ø–∏–æ–Ω–æ–≤:', error);
  }
  return {};
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
function saveChampionUsage(usage: ChampionUsage): void {
  try {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(usage));
  } catch (error) {
    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ–º–ø–∏–æ–Ω–æ–≤:', error);
  }
}

// –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞ —á–µ–º–ø–∏–æ–Ω–æ–≤
export function trackChampionUsage(championNames: string[]): void {
  const usage = loadChampionUsage();
  
  for (const name of championNames) {
    usage[name] = (usage[name] || 0) + 1;
  }
  
  saveChampionUsage(usage);
  console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ–º–ø–∏–æ–Ω–æ–≤:', championNames);
}

// –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–µ–º–ø–∏–æ–Ω–æ–≤ –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É)
export function sortChampionsByUsage(champions: string[]): string[] {
  const usage = loadChampionUsage();
  
  return [...champions].sort((a, b) => {
    const usageA = usage[a] || 0;
    const usageB = usage[b] || 0;
    
    // –°–Ω–∞—á–∞–ª–∞ —Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —Ä–µ–∂–µ
    if (usageA !== usageB) {
      return usageA - usageB;
    }
    
    // –ï—Å–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ (–∞–ª—Ñ–∞–≤–∏—Ç–Ω—ã–π)
    return a.localeCompare(b);
  });
}

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
export function getChampionUsageStats(): { champion: string; count: number }[] {
  const usage = loadChampionUsage();
  return Object.entries(usage)
    .map(([champion, count]) => ({ champion, count }))
    .sort((a, b) => a.count - b.count);
}

// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
export function clearChampionUsage(): void {
  try {
    localStorage.removeItem(STORAGE_KEY);
    console.log('üóëÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ–º–ø–∏–æ–Ω–æ–≤ –æ—á–∏—â–µ–Ω–∞');
  } catch (error) {
    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:', error);
  }
}
